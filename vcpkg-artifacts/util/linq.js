"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.countWhere = exports.ManyMap = exports.length = exports.entries = exports.linq = exports.values = exports.keys = exports.when = void 0;
/** performs a truthy check on the value, and calls onTrue when the condition is true,and onFalse when it's not */
function when(value, onTrue, onFalse = () => { }) {
    return value ? onTrue(value) : onFalse();
}
exports.when = when;
/* eslint-disable */
function linqify(iterable) {
    if (iterable['linq'] === iterable) {
        return iterable;
    }
    const r = {
        [Symbol.iterator]: iterable[Symbol.iterator].bind(iterable),
        all: all.bind(iterable),
        any: any.bind(iterable),
        bifurcate: bifurcate.bind(iterable),
        concat: concat.bind(iterable),
        distinct: distinct.bind(iterable),
        duplicates: duplicates.bind(iterable),
        first: first.bind(iterable),
        select: select.bind(iterable),
        selectMany: selectMany.bind(iterable),
        selectNonNullable: selectNonNullable.bind(iterable),
        toArray: toArray.bind(iterable),
        toObject: toObject.bind(iterable),
        where: where.bind(iterable),
        forEach: forEach.bind(iterable),
        aggregate: aggregate.bind(iterable),
        join: join.bind(iterable),
        count: len.bind(iterable),
        results: results.bind(iterable),
        toMap: toMap.bind(iterable),
        groupBy: groupBy.bind(iterable),
        selectAsync: selectAsync.bind(iterable),
    };
    r.linq = r;
    return r;
}
function len() {
    return length(this);
}
function keys(source) {
    if (source) {
        if (Array.isArray(source)) {
            return source.keys();
        }
        if (source instanceof Map) {
            return source.keys();
        }
        if (source instanceof Set) {
            throw new Error('Unable to iterate keys on a Set');
        }
        return Object.keys(source);
    }
    // undefined/null
    return [];
}
exports.keys = keys;
function _keys(source) {
    if (source) {
        if (Array.isArray(source)) {
            return linqify(source.keys());
        }
        if (source instanceof Map) {
            return linqify(source.keys());
        }
        if (source instanceof Set) {
            throw new Error('Unable to iterate keys on a Set');
        }
        return linqify((Object.keys(source)));
    }
    // undefined/null
    return linqify([]);
}
function isIterable(source) {
    return !!source && !!source[Symbol.iterator];
}
function values(source) {
    if (source) {
        // map
        if (source instanceof Map || source instanceof Set) {
            return source.values();
        }
        // any iterable source
        if (isIterable(source)) {
            return source;
        }
        // dictionary (object keys)
        return Object.values(source);
    }
    // null/undefined
    return [];
}
exports.values = values;
exports.linq = {
    values: _values,
    entries: _entries,
    keys: _keys,
    find: _find,
    startsWith: _startsWith,
    join: _join
};
/** returns an IterableWithLinq<> for values in the collection
 *
 * @note - null/undefined/empty values are considered 'empty'
*/
function _values(source) {
    return (source) ? linqify(values(source)) : linqify([]);
}
function entries(source) {
    if (source) {
        if (Array.isArray(source)) {
            return source.entries();
        }
        if (source instanceof Map) {
            return source.entries();
        }
        if (source instanceof Set) {
            throw new Error('Unable to iterate items on a Set (use values)');
        }
        return Object.entries(source);
    }
    // undefined/null
    return [];
}
exports.entries = entries;
/** returns an IterableWithLinq<{key,value}> for the source */
function _entries(source) {
    return linqify(source ? entries(source) : []);
}
/** returns the first value where the key equals the match value (case-insensitive) */
function _find(source, match) {
    return _entries(source).first(([key,]) => key.toString().localeCompare(match, undefined, { sensitivity: 'base' }) === 0)?.[1];
}
/** returns the first value where the key starts with the match value (case-insensitive) */
function _startsWith(source, match) {
    match = match.toLowerCase();
    return _entries(source).first(([key,]) => key.toString().toLowerCase().startsWith(match))?.[1];
}
function _join(source, delimiter) {
    return source ? _values(source).join(delimiter) : '';
}
function length(source) {
    if (source) {
        if (Array.isArray(source) || typeof (source) === 'string') {
            return source.length;
        }
        if (source instanceof Map || source instanceof Set) {
            return source.size;
        }
        if (isIterable(source)) {
            return [...source].length;
        }
        return source ? Object.values(source).length : 0;
    }
    return 0;
}
exports.length = length;
function toMap(keySelector, selector) {
    const result = new Map();
    for (const each of this) {
        result.set(keySelector(each), selector(each));
    }
    return result;
}
function groupBy(keySelector, selector) {
    const result = new ManyMap();
    for (const each of this) {
        result.push(keySelector(each), selector(each));
    }
    return result;
}
function any(predicate) {
    for (const each of this) {
        if (!predicate || predicate(each)) {
            return true;
        }
    }
    return false;
}
function all(predicate) {
    for (const each of this) {
        if (!predicate(each)) {
            return false;
        }
    }
    return true;
}
function concat(more) {
    return linqify(function* () {
        for (const each of this) {
            yield each;
        }
        for (const each of more) {
            yield each;
        }
    }.bind(this)());
}
function select(selector) {
    return linqify(function* () {
        for (const each of this) {
            yield selector(each);
        }
    }.bind(this)());
}
async function* selectAsync(selector) {
    for (const each of this) {
        yield selector(each);
    }
}
function selectMany(selector) {
    return linqify(function* () {
        for (const each of this) {
            yield* selector(each);
        }
    }.bind(this)());
}
function where(predicate) {
    return linqify(function* () {
        for (const each of this) {
            if (predicate(each)) {
                yield each;
            }
        }
    }.bind(this)());
}
function forEach(action) {
    for (const each of this) {
        action(each);
    }
}
function aggregate(accumulator, seed, resultAction) {
    let result = seed;
    for (const each of this) {
        if (result === undefined) {
            result = each;
            continue;
        }
        result = accumulator(result, each);
    }
    return resultAction !== undefined ? resultAction(result) : result;
}
function selectNonNullable(selector) {
    return linqify(function* () {
        for (const each of this) {
            const value = selector(each);
            if (value) {
                yield value;
            }
        }
    }.bind(this)());
}
function nonNullable() {
    return linqify(function* () {
        for (const each of this) {
            if (each) {
                yield each;
            }
        }
    }.bind(this)());
}
function first(predicate) {
    for (const each of this) {
        if (!predicate || predicate(each)) {
            return each;
        }
    }
    return undefined;
}
function toArray() {
    return [...this];
}
function toObject(selector) {
    const result = {};
    for (const each of this) {
        const [key, value] = selector(each);
        result[key] = value;
    }
    return result;
}
async function results() {
    await Promise.all([...this]);
}
function join(separator) {
    return [...this].join(separator);
}
function bifurcate(predicate) {
    const result = [new Array(), new Array()];
    for (const each of this) {
        result[predicate(each) ? 0 : 1].push(each);
    }
    return result;
}
function distinct(selector) {
    const hash = {};
    return linqify(function* () {
        if (!selector) {
            selector = i => i;
        }
        for (const each of this) {
            const k = JSON.stringify(selector(each));
            if (!hash[k]) {
                hash[k] = true;
                yield each;
            }
        }
    }.bind(this)());
}
function duplicates(selector) {
    const hash = {};
    return linqify(function* () {
        if (!selector) {
            selector = i => i;
        }
        for (const each of this) {
            const k = JSON.stringify(selector(each));
            if (hash[k] === undefined) {
                hash[k] = false;
            }
            else {
                if (hash[k] === false) {
                    hash[k] = true;
                    yield each;
                }
            }
        }
    }.bind(this)());
}
/** A Map of Key: Array<Value>  */
class ManyMap extends Map {
    /**
     * Push the value into the array at key
     * @param key the unique key in the map
     * @param value the value to push to the collection at 'key'
     */
    push(key, value) {
        this.getOrDefault(key, []).push(value);
    }
}
exports.ManyMap = ManyMap;
function countWhere(from, predicate) {
    let v = 0;
    const all = [];
    for (const each of from) {
        const test = predicate(each);
        if (test.then) {
            all.push(test.then((antecedent) => {
                if (antecedent) {
                    v++;
                }
            }));
            continue;
        }
        if (test) {
            v++;
        }
    }
    if (all.length) {
        return Promise.all(all).then(() => v);
    }
    return v;
}
exports.countWhere = countWhere;
//# sourceMappingURL=data:application/json;base64,
// SIG // Begin signature block
// SIG // MIIoRAYJKoZIhvcNAQcCoIIoNTCCKDECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // 6VKYM1g9xZ5eorQqeV6YAC8/d0Y2Nld5ZdvGpefKdX2g
// SIG // gg12MIIF9DCCA9ygAwIBAgITMwAABARsdAb/VysncgAA
// SIG // AAAEBDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTI0MDkxMjIwMTExNFoX
// SIG // DTI1MDkxMTIwMTExNFowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // tCg32mOdDA6rBBnZSMwxwXegqiDEUFlvQH9Sxww07hY3
// SIG // w7L52tJxLg0mCZjcszQddI6W4NJYb5E9QM319kyyE0l8
// SIG // EvA/pgcxgljDP8E6XIlgVf6W40ms286Cr0azaA1f7vaJ
// SIG // jjNhGsMqOSSSXTZDNnfKs5ENG0bkXeB2q5hrp0qLsm/T
// SIG // WO3oFjeROZVHN2tgETswHR3WKTm6QjnXgGNj+V6rSZJO
// SIG // /WkTqc8NesAo3Up/KjMwgc0e67x9llZLxRyyMWUBE9co
// SIG // T2+pUZqYAUDZ84nR1djnMY3PMDYiA84Gw5JpceeED38O
// SIG // 0cEIvKdX8uG8oQa047+evMfDRr94MG9EWwIDAQABo4IB
// SIG // czCCAW8wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFPIboTWxEw1PmVpZS+AzTDwo
// SIG // oxFOMEUGA1UdEQQ+MDykOjA4MR4wHAYDVQQLExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xFjAUBgNVBAUTDTIzMDAx
// SIG // Mis1MDI5MjMwHwYDVR0jBBgwFoAUSG5k5VAF04KqFzc3
// SIG // IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBhBggr
// SIG // BgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWlj
// SIG // Q29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAMBgNV
// SIG // HRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCI5g/S
// SIG // KUFb3wdUHob6Qhnu0Hk0JCkO4925gzI8EqhS+K4umnvS
// SIG // BU3acsJ+bJprUiMimA59/5x7WhJ9F9TQYy+aD9AYwMtb
// SIG // KsQ/rst+QflfML+Rq8YTAyT/JdkIy7R/1IJUkyIS6srf
// SIG // G1AKlX8n6YeAjjEb8MI07wobQp1F1wArgl2B1mpTqHND
// SIG // lNqBjfpjySCScWjUHNbIwbDGxiFr93JoEh5AhJqzL+8m
// SIG // onaXj7elfsjzIpPnl8NyH2eXjTojYC9a2c4EiX0571Ko
// SIG // mhENF3RtR25A7/X7+gk6upuE8tyMy4sBkl2MUSF08U+E
// SIG // 2LOVcR8trhYxV1lUi9CdgEU2CxODspdcFwxdT1+G8YNc
// SIG // gzHyjx3BNSI4nOZcdSnStUpGhCXbaOIXfvtOSfQX/UwJ
// SIG // oruhCugvTnub0Wna6CQiturglCOMyIy/6hu5rMFvqk9A
// SIG // ltIJ0fSR5FwljW6PHHDJNbCWrZkaEgIn24M2mG1M/Ppb
// SIG // /iF8uRhbgJi5zWxo2nAdyDBqWvpWxYIoee/3yIWpquVY
// SIG // cYGhJp/1I1sq/nD4gBVrk1SKX7Do2xAMMO+cFETTNSJq
// SIG // fTSSsntTtuBLKRB5mw5qglHKuzapDiiBuD1Zt4QwxA/1
// SIG // kKcyQ5L7uBayG78kxlVNNbyrIOFH3HYmdH0Pv1dIX/Mq
// SIG // 7avQpAfIiLpOWwcbjzCCB3owggVioAMCAQICCmEOkNIA
// SIG // AAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290
// SIG // IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4XDTEx
// SIG // MDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9zb2Z0
// SIG // IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJKoZI
// SIG // hvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t2G6q
// SIG // ghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7dN2vG
// SIG // EtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55JnOlo
// SIG // XtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJSJhIv
// SIG // 56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64DhkrG5k
// SIG // NXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ97/vj
// SIG // K1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+sYxd
// SIG // 6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4ftKd
// SIG // gCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf8NBS
// SIG // v4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOnqWbs
// SIG // YR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj43Bd
// SIG // D1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8GLhE
// SIG // fEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO3+xb
// SIG // n6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4X7Iv
// SIG // hNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXUpUMv
// SIG // dJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxGoGyY
// SIG // 0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3FQEE
// SIG // AwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVtqMp1
// SIG // ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
// SIG // VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0j
// SIG // BBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYDVR0f
// SIG // BFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3NvZnQu
// SIG // Y29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcBAQRS
// SIG // MFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0MjAx
// SIG // MV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGUMIGR
// SIG // BgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9jcy9w
// SIG // cmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIgHQBM
// SIG // AGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABhAHQA
// SIG // ZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEA
// SIG // Z/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQwWVf
// SIG // Liw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZddZYSQ
// SIG // fYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9G6XU
// SIG // tR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKKELuk
// SIG // qQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP80Yr
// SIG // 3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ1h/D
// SIG // Mhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgycSca
// SIG // f7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6CPxNN
// SIG // ZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2l4bf
// SIG // 2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1HxS+
// SIG // YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9WfOX
// SIG // pQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpIlR+r
// SIG // +0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h15q/6
// SIG // /IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BXIqF4
// SIG // ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3ZbCoBI
// SIG // a/15n8G9bW1qyVJzEw16UM0xghomMIIaIgIBATCBlTB+
// SIG // MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv
// SIG // bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWlj
// SIG // cm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNy
// SIG // b3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMzAAAE
// SIG // BGx0Bv9XKydyAAAAAAQEMA0GCWCGSAFlAwQCAQUAoIGu
// SIG // MBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwGCisG
// SIG // AQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3
// SIG // DQEJBDEiBCD4eAIN17BDmzXy+sWgiuIbVMiaFcuT3g4A
// SIG // Xm99Xuxw1DBCBgorBgEEAYI3AgEMMTQwMqAUgBIATQBp
// SIG // AGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5taWNy
// SIG // b3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAHDreQyQ
// SIG // 6ss4murL+cWUZm6wtkJpdKYW0JUHKwUQYDhY+MndNTZk
// SIG // Oj+15nBpL5wUnQTB5gu6x7lYjPxuIKru9khd8wS2dw51
// SIG // lTKHcCPjJT0tDINphEpM+Gxl7H5Su110W/RAeMa6jm7z
// SIG // D7DxVb+x7Ov0XcUIVcQ/Jqe2WlxShw++3d7bU8YZISZ/
// SIG // p26xaXBaGe7Wzsn5Vgwk7mSd9PAtpbYLxlnwmhcP5ySC
// SIG // JpD1ZdVnGA04EpSdrrYm4hs7TiQLZkj7BQhtbtsclD5c
// SIG // Q+36nYZFB4jjcd+OVHwofYuvLaMMmMvPwWZicRE2MHku
// SIG // E501I/QhDzQ+BF4ZNjVfemseAaehghewMIIXrAYKKwYB
// SIG // BAGCNwMDATGCF5wwgheYBgkqhkiG9w0BBwKggheJMIIX
// SIG // hQIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBWgYLKoZIhvcN
// SIG // AQkQAQSgggFJBIIBRTCCAUECAQEGCisGAQQBhFkKAwEw
// SIG // MTANBglghkgBZQMEAgEFAAQgrgsRgPwAAFp3OA1dTiwh
// SIG // s3mGelam03syKPeOJF7uTosCBmftNv7i1RgTMjAyNTA0
// SIG // MTYwMTA0MzYuMjUyWjAEgAIB9KCB2aSB1jCB0zELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0
// SIG // IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMScwJQYD
// SIG // VQQLEx5uU2hpZWxkIFRTUyBFU046NDAxQS0wNUUwLUQ5
// SIG // NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFNlcnZpY2WgghH+MIIHKDCCBRCgAwIBAgITMwAAAf7Q
// SIG // qMJ7NCELAQABAAAB/jANBgkqhkiG9w0BAQsFADB8MQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yNDA3MjUx
// SIG // ODMxMThaFw0yNTEwMjIxODMxMThaMIHTMQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJl
// SIG // bGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJzAlBgNVBAsT
// SIG // Hm5TaGllbGQgVFNTIEVTTjo0MDFBLTA1RTAtRDk0NzEl
// SIG // MCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy
// SIG // dmljZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
// SIG // ggIBALy8IRcVpagON6JbBODwnoGeJkn7B9mE0ihGL/Bp
// SIG // 99+tgZmsnHX+U97UMaT9zVputmB1IniEF8PtLuKpWsuA
// SIG // DdyKJyPuOzaYvX6OdsXQFzF9KRq3NHqlvEVjd2381zyr
// SIG // 9OztfIth4w8i7ssGMigPRZlm3j42oX/TMHfEIMoJD7cA
// SIG // 61UBi8jpMjN1U4hyqoRrvQQhlUXR1vZZjzK61JT1omFf
// SIG // S1QgeVWHfgBFLXX6gHapc1cQOdxIMUqoaeiW3xCp03XH
// SIG // z+k/DIq9B68E07VdodsgwbY120CGqsnCjm+t9xn0ZJ9t
// SIG // eizgwYN+z/8cIaHV0/NWQtmhze3sRA5pm4lrLIxrxSZJ
// SIG // YtoOnbdNXkoTohpoW6J69Kl13AXqjW+kKBfI1/7g1bWP
// SIG // aby+I/GhFkuPYSlB9Js7ArnCK8FEvsfDLk9Ln+1VwhTR
// SIG // W4glDUU6H8SdweOeHhiYS9H8FE0W4Mgm6S4CjCg4gkbm
// SIG // +uQ4Wng71AACU/dykgqHhQqJJT2r24EMmoRmQy/71gFY
// SIG // 1+W/Cc4ZcvYBgnSv6ouovnMWdEvMegdsoz22X3QVXx/z
// SIG // Qaf9S5+8W3jhEwDp+zk/Q91BrdKvioloGONh5y48oZdW
// SIG // wLuR34K8gDtwwmiHVdrY75CWstqjpxew4I/GutCkE/UI
// SIG // HyX8F5692Som2DI2lGwjSA58c9spAgMBAAGjggFJMIIB
// SIG // RTAdBgNVHQ4EFgQUb857ifUlNoOZf+f2/uQgYm2xxd0w
// SIG // HwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIw
// SIG // XwYDVR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNy
// SIG // b3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIw
// SIG // VGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwG
// SIG // CCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9N
// SIG // aWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAx
// SIG // MCgxKS5jcnQwDAYDVR0TAQH/BAIwADAWBgNVHSUBAf8E
// SIG // DDAKBggrBgEFBQcDCDAOBgNVHQ8BAf8EBAMCB4AwDQYJ
// SIG // KoZIhvcNAQELBQADggIBAIk+DVLztpcPtHQzLbAbsZl9
// SIG // qN5VUKp0JLiEwBiBgoCPrJe2amTkw3fC6sbB+Blgj087
// SIG // XN7a/AIAb7GCM1oxcIqAowkDg6taATFjcxLCs3JB8QM2
// SIG // KOUs3uzj5DANwwMVauEkkfMvk0QthnDndCUXmdZT5YZT
// SIG // 5fVyPs/DoLTj5kJyy4j/as6Ux8Bc3vrG6kp/HHpHbjGX
// SIG // S8hyZNzYsNwJ4JVP1k8xrEAHXIfUlVeCx4n1J5sE39It
// SIG // O4irU5TZKt28dYsloOze4xmQAUVk9pl/mAFR5Stu7fZ/
// SIG // lrWG5+nDiTV+i7B/MT1QUWACEVZFrDMhAHaD/Xan2mc8
// SIG // Fxpo7lUPd9TYcx44xvhH8NdfA145N1at6lCNa3t+MzDE
// SIG // 0c2WRMPNhbqRd74lzUdw1TpUvSR+MeXpnyDWtbrkmnOh
// SIG // eAniQg9RmpH0uw+WsjbGmdnvrAVIetilU5YRLEER2UcA
// SIG // k8W4sdWOIicPjwzS3NB39fal9l4l9LtkjPQlk047M/Ur
// SIG // woyCksQmRQjb/86SiJbB8e4UDUB0jGyodP8MJ/OroiAC
// SIG // xI2s1LMxNPl+q3Dmw31OIfzv9L5mxdwTEfuOawGTABEy
// SIG // bEQz8RyQqP+VxoVnYPy6CeV1gazgy+OGDazexUZxxAAK
// SIG // 9OrH5amfHnldxbgynT+YdfVlJxlsDtR/2Y1MzqFRold4
// SIG // MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAA
// SIG // FTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2Vy
// SIG // dGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMw
// SIG // MTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGlt
// SIG // ZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEB
// SIG // BQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O
// SIG // 1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xP
// SIG // x2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpS
// SIG // g0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/Y
// SIG // JlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+
// SIG // jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GP
// SIG // sjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6
// SIG // BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyzi
// SIG // YrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31B
// SIG // mkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn42
// SIG // 7DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n
// SIG // 6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLR
// SIG // vWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2
// SIG // ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9
// SIG // stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8
// SIG // FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6t
// SIG // AgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQAB
// SIG // MCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q
// SIG // /y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ
// SIG // 6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/
// SIG // BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQu
// SIG // Y29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMG
// SIG // A1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQM
// SIG // HgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMB
// SIG // Af8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjR
// SIG // PZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6
// SIG // Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1
// SIG // Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBa
// SIG // BggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWlj
// SIG // Um9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/q
// SIG // XBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x
// SIG // 5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOw
// SIG // Bb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1Tk
// SIG // eFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8Z
// SIG // thISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/AL
// SIG // aoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99J
// SIG // o3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32
// SIG // THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEU
// SIG // BHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsN
// SIG // n6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQ
// SIG // THa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+
// SIG // y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10Cga
// SIG // iQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0l
// SIG // lOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghi
// SIG // f9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8qGCA1kw
// SIG // ggJBAgEBMIIBAaGB2aSB1jCB0zELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQg
// SIG // T3BlcmF0aW9ucyBMaW1pdGVkMScwJQYDVQQLEx5uU2hp
// SIG // ZWxkIFRTUyBFU046NDAxQS0wNUUwLUQ5NDcxJTAjBgNV
// SIG // BAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Wi
// SIG // IwoBATAHBgUrDgMCGgMVAIRjRw/2u0NG0C1lRvSbhsYC
// SIG // 0V7HoIGDMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNV
// SIG // BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
// SIG // HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm
// SIG // MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENB
// SIG // IDIwMTAwDQYJKoZIhvcNAQELBQACBQDrqNgfMCIYDzIw
// SIG // MjUwNDE1MTMwNTM1WhgPMjAyNTA0MTYxMzA1MzVaMHcw
// SIG // PQYKKwYBBAGEWQoEATEvMC0wCgIFAOuo2B8CAQAwCgIB
// SIG // AAICHOoCAf8wBwIBAAICE3IwCgIFAOuqKZ8CAQAwNgYK
// SIG // KwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgC
// SIG // AQACAwehIKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQsF
// SIG // AAOCAQEAu6pSnERiwcK9GO6LyIrHK3NhOhI4fHYADsew
// SIG // APij5ljSBUZxcNXtQkgTUhBgxFwtbpEi6H7Z4eRhaCr8
// SIG // 2mwjj/RjOTGYigH98PY8plj71/j+xgpoX+mYF8Ji9L9n
// SIG // ke5hCoXsq3lpbkueNdYNJGCgOMC6VrdwsTdcooHxkUrT
// SIG // CFncjA0Yb+Esp9jm7sTORUbqMDpN1PuqlT/aBYm+Ogvy
// SIG // Bv5zjsJ2ZjxVLCraPSyfIohnpqT1kXlXa0qsa0lQkJAt
// SIG // wvQCLCNiWKadxZIh1U40zi+I7YkjxzE/pl5oWIHJ0T3g
// SIG // JzsLSWM5oxHNjTsGb5TPq3wKsEm1guSDlwFv/CofwDGC
// SIG // BA0wggQJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYD
// SIG // VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25k
// SIG // MR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24x
// SIG // JjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBD
// SIG // QSAyMDEwAhMzAAAB/tCowns0IQsBAAEAAAH+MA0GCWCG
// SIG // SAFlAwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZI
// SIG // hvcNAQkQAQQwLwYJKoZIhvcNAQkEMSIEIOuxiHt3qwpL
// SIG // o+a+PSFjf5sKJ3yWJzolEj92FjLW3UiPMIH6BgsqhkiG
// SIG // 9w0BCRACLzGB6jCB5zCB5DCBvQQgEYXM3fxTyJ8Y0fdp
// SIG // toT1qnPrxjhtfvyNFrZArLcodHkwgZgwgYCkfjB8MQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3Nv
// SIG // ZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAf7QqMJ7
// SIG // NCELAQABAAAB/jAiBCAHYe7elml2E+J1N7A/NG+yjZjP
// SIG // r0woM8i8a7hb+T92MzANBgkqhkiG9w0BAQsFAASCAgC7
// SIG // vXVm5+cpdOs/VyKlBQOW+04UGbACty5Pa9e1Q9ggn+DG
// SIG // 7Io7YK6ym3hBqZAtDhaoPfmU7Zwb6L/JAiLemQMvPz3C
// SIG // KNPCVE0oXpC4mP+gdPifj4W8499fybDaFur/G5NmnBfc
// SIG // wKkrKX5c8PnWAPyQ+9X3/C55Ri5CII35ZjyGf0G7cKej
// SIG // 4zWJ6ePRAd8fihhYN52eD88XCCmwOpNVtt0ZLQXM7aW0
// SIG // ZmI6D/HVfufvyYA8jjVgwsrH6U3IZI8m0ez9oNWnjGMI
// SIG // aIyuhtLoNzI2HxIbNPWwWb8VZgfkzH4PavxJN6ONFDlF
// SIG // U/tJyf/5FpAE3A6UMhZVMJ3mm4f8wzkzBbvaTHWSF9Bh
// SIG // 8SS83bjPxQcCpzjHMALn2oa6nwiCfxJ6Y86AEJL8tXpY
// SIG // TSgBRDHE5RJKUpDPC4DLfo9Uu0me8jLtFVOQKO7ODp+T
// SIG // ApVZQnAbT/Op5szVm2Y6KORL0ntQ+uI1UrOn0AbmFnUj
// SIG // da/Gs8Jk0BP1H8LQ1EHbbafAVWmFtoFzkJHZ7AHYCoIe
// SIG // Lfe96aHvE3JYVRphdE7UWTJny9sSHwYkE2a7Fjr2NaHG
// SIG // ufKpyceUTOMfAT58rd3/5LVLtD57rDhok2DUCangYqfi
// SIG // lwrTx3CSEgKGg+9Z8G+9kg5h7rgHokWovEghYZPeY1a1
// SIG // cB9YgVH4wl4MosSUDKr4pw==
// SIG // End signature block
